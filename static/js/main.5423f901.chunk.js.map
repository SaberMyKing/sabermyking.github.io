{"version":3,"sources":["components/Banner.jsx","components/pages/IndexPage.jsx","components/Article.jsx","components/pages/ArticleDetailsPage.jsx","components/pages/ArticlesPage.jsx","components/pages/AboutPage.jsx","components/NavigationBar.jsx","components/AppRouter.jsx","App.js","serviceWorker.js","index.js"],"names":["Banner","className","src","React","Component","IndexPage","Article","props","state","fetch","this","id","then","response","text","setState","source","ArticleDetailsPage","useParams","ArticlesPage","AboutPage","NavigationBar","item_class","link_to","display","alt","NavigationItem","class","showHover","bind","hideHover","to","onMouseEnter","onMouseLeave","NavigationAvatar","AppRouter","href","exact","path","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5423f901.chunk.js","sourcesContent":["import React from 'react';\nimport '../stylesheets/Common.css';\n\nclass Banner extends React.Component {\n    render() {\n        return (\n            <div className='banner-container'>\n                <img src='/banner.png' className='banner'></img>\n            </div>\n        );\n    }\n}\n\nexport default Banner;\n","import React from 'react'\nimport Banner from '../Banner'\nimport '../../stylesheets/Page.css'\n\nclass IndexPage extends React.Component {\n    render() {\n        return (\n            <div>\n                <Banner />\n                This is IndexPage.\n            </div>\n        );\n    }\n}\n\nexport default IndexPage;\n","import React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport '../stylesheets/Style.scss'\n\nclass Article extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n    \n    componentDidMount() {\n        fetch(`/articles/${this.props.id}.md`)\n            .then((response) => response.text())\n            .then((text) => this.setState({ text: text }))\n    }\n\n    render() {\n        return (\n            <ReactMarkdown className=\"article markdown\" source={ this.state.text } />\n        )\n    }\n}\n\nexport default Article;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport Article from '../Article';\nimport '../../stylesheets/article.css'\n\nfunction ArticleDetailsPage() {\n    let { id } = useParams();\n\n    return (\n        <div>\n            <div className='article-container'>\n                <Article id={ id }/>\n            </div>\n        </div>\n    );\n}\n\nexport default ArticleDetailsPage;\n","import React from 'react';\n\nclass ArticlesPage extends React.Component {\n    render() {\n        return (\n            <div>\n                Articles List\n            </div>\n        );\n    }\n}\n\nexport default ArticlesPage;\n","import React from 'react'\n\nclass AboutPage extends React.Component {\n    render() {\n        return (\n            <div>\n                Hi, I am SaberMyKing.\n            </div>\n        );\n    }\n}\n\nexport default AboutPage;\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport '../stylesheets/navigation-bar.css';\n\nclass NavigationBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { item_class: 'navigation-item' }\n    }\n\n    render() {\n        return (\n            <div className='navigation-bar-box'>\n                <div className='navigation-bar'>\n                    <div className='navigation-left-box'>\n                        <NavigationItem link_to='/' display='Home'/>\n                        <NavigationItem link_to='/articles/details/骑士王的荣耀' display='Fate'/>\n                        <NavigationItem link_to='/articles/details/红宝石' display='Ruby'/>\n                    </div>\n\n                    <div className='navigation-right-box'>\n                        <div className='navigation-item'><span>Language</span></div>\n                        <NavigationAvatar link_to='/about' src='/myface.jpg' alt='This is SaberMyKing.' />\n                    </div>\n                </div>\n\n                {/* <img src='/myface.jpg' className='navigation-myface-details' onMouseOver={ ()=>console.log('over')} alt='This is SaberMyKing.'></img> */}\n            </div>\n        );\n    }\n}\n\nclass NavigationItem extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { class: 'navigation-item' };\n        this.showHover = this.showHover.bind(this);\n        this.hideHover = this.hideHover.bind(this);\n    }\n\n    showHover() {\n        this.setState({ class: 'navigation-item navigation-item-selected' })\n    }\n\n    hideHover() {\n        this.setState({ class: 'navigation-item' })\n    }\n\n    render() {\n        return (\n            <Link to={ this.props.link_to }\n                className={this.state.class}\n                onMouseEnter={ this.showHover }\n                onMouseLeave={ this.hideHover } >\n                <span>{ this.props.display }</span>\n            </Link>\n        )\n    }\n}\n\nclass NavigationAvatar extends NavigationItem {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <Link to={ this.props.link_to }\n                className={this.state.class}\n                onMouseEnter={ this.showHover }\n                onMouseLeave={ this.hideHover } >\n                <img src={ this.props.src } className='navigation-myface' alt='This is SaberMyKing.'></img>\n            </Link>\n        )\n    }\n}\n\nexport default NavigationBar;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport IndexPage from './pages/IndexPage';\nimport ArticleDetailsPage from './pages/ArticleDetailsPage';\nimport ArticlesPage from './pages/ArticlesPage';\nimport AboutPage from './pages/AboutPage';\nimport NavigationBar from './NavigationBar'\nimport GithubCorner from 'react-github-corner';\nimport './../stylesheets/Page.css'\n\nfunction AppRouter() {\n    return (\n        <Router>\n            <div className='page'>\n                <GithubCorner href='https://github.com/sabermyking/myking-page' />\n                <NavigationBar />\n\n                <Switch>\n                    <Route exact path=\"/\"><IndexPage /></Route>\n                    <Route exact path=\"/articles\"><ArticlesPage /></Route>\n                    <Route path=\"/articles/details/:id\"><ArticleDetailsPage /></Route>\n                    <Route path=\"/about\"><AboutPage /></Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nexport default AppRouter;\n","import './App.css';\nimport AppRouter from './components/AppRouter';\n\nfunction App() {\n  return (\n      AppRouter()\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/Banner.jsx","components/pages/IndexPage.jsx","components/pages/ArticlePage.jsx","components/pages/HomePage.jsx","components/pages/AboutPage.jsx","components/NavigationBar.jsx","components/AppRouter.jsx","App.js","serviceWorker.js","index.js"],"names":["Banner","class","React","Component","IndexPage","ArticlePage","HomePage","AboutPage","NavigationBar","to","src","alt","onMouseOver","console","log","AppRouter","href","exact","path","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6WAeeA,G,uLAVP,OACI,yBAAKC,MAAM,cACP,yBAAKA,MAAM,gB,GAJNC,IAAMC,YCYZC,G,uLATP,OACI,yBAAKH,MAAM,cACP,kBAAC,EAAD,MADJ,0B,GAHYC,IAAMC,YCQfE,E,iLARP,OACI,gD,GAHcH,IAAMC,WCUjBG,E,iLARP,OACI,6C,GAHWJ,IAAMC,WCUdI,E,iLARP,OACI,0D,GAHYL,IAAMC,WC6BfK,G,uLAzBP,OACI,yBAAKP,MAAM,sBACP,yBAAKA,MAAM,kBACP,yBAAKA,MAAM,uBACP,yBAAKA,MAAM,mBAAkB,kBAAC,IAAD,CAAMQ,GAAG,KAAT,6BAC7B,yBAAKR,MAAM,mBAAkB,kBAAC,IAAD,CAAMQ,GAAG,aAAT,iBAC7B,yBAAKR,MAAM,mBAAkB,kBAAC,IAAD,CAAMQ,GAAG,aAAT,wBAGjC,yBAAKR,MAAM,wBACP,yBAAKA,MAAM,mBACP,kBAAC,IAAD,CAAMQ,GAAG,UACT,yBAAKC,IAAI,cAAcT,MAAM,oBAAoBU,IAAI,2BAGzD,yBAAKV,MAAM,mBAAkB,6DAIrC,yBAAKS,IAAI,cAAcT,MAAM,4BAA4BW,YAAc,kBAAIC,QAAQC,IAAI,SAASH,IAAI,8B,GArBxFT,IAAMC,Y,iBCqBnBY,MAhBf,WACI,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAcC,KAAK,+CACnB,kBAAC,EAAD,MAEA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAAI,kBAAC,EAAD,OACtB,kBAAC,IAAD,CAAOA,KAAK,aAAY,kBAAC,EAAD,OACxB,kBAAC,IAAD,CAAOA,KAAK,SAAQ,kBAAC,EAAD,OACpB,kBAAC,IAAD,CAAOA,KAAK,UAAS,kBAAC,EAAD,UCVtBC,MANf,WACE,OACIJ,KCOcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9cb634f0.chunk.js","sourcesContent":["import React from 'react';\nimport '../stylesheets/Common.css';\n\nclass Banner extends React.Component {\n    render() {\n        return (\n            <div class='banner-box'>\n                <div class='banner'>\n                    {/* <img src='/myface.jpg' class='navigation-myface' alt='This is SaberMyKing.'></img> */}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Banner;\n","import React from 'react'\nimport Banner from '../Banner'\nimport '../../stylesheets/Page.css'\n\nclass IndexPage extends React.Component {\n    render() {\n        return (\n            <div class='index-page'>\n                <Banner />\n                This is IndexPage.\n            </div>\n        );\n    }\n}\n\nexport default IndexPage;\n","import React from 'react'\n\nclass ArticlePage extends React.Component {\n    render() {\n        return (\n            <div>\n                ArticlePage\n            </div>\n        );\n    }\n}\n\nexport default ArticlePage;\n","import React from 'react'\n\nclass HomePage extends React.Component {\n    render() {\n        return (\n            <div>\n                HomePage\n            </div>\n        );\n    }\n}\n\nexport default HomePage;\n","import React from 'react'\n\nclass AboutPage extends React.Component {\n    render() {\n        return (\n            <div>\n                Hi, I am SaberMyKing.\n            </div>\n        );\n    }\n}\n\nexport default AboutPage;\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport '../stylesheets/NavigationBar.css';\n\nclass NavigationBar extends React.Component {\n    render() {\n        return (\n            <div class='navigation-bar-box'>\n                <div class='navigation-bar'>\n                    <div class='navigation-left-box'>\n                        <div class='navigation-item'><Link to='/'>茵蒂克丝</Link></div>\n                        <div class='navigation-item'><Link to='/articles'>菲特</Link></div>\n                        <div class='navigation-item'><Link to='/articles'>阿尼妹</Link></div>\n                    </div>\n\n                    <div class='navigation-right-box'>\n                        <div class='navigation-item'>\n                            <Link to='/about'>\n                            <img src='/myface.jpg' class='navigation-myface' alt='This is SaberMyKing.'></img>\n                            </Link>\n                        </div>\n                        <div class='navigation-item'><span>路人模式</span></div>\n                    </div>\n                </div>\n\n                <img src='/myface.jpg' class='navigation-myface-details' onMouseOver={ ()=>console.log('over')} alt='This is SaberMyKing.'></img>\n            </div>\n        );\n    }\n}\n\nexport default NavigationBar;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport IndexPage from './pages/IndexPage';\nimport ArticlePage from './pages/ArticlePage';\nimport HomePage from './pages/HomePage';\nimport AboutPage from './pages/AboutPage';\nimport NavigationBar from './NavigationBar'\nimport GithubCorner from 'react-github-corner';\n\nfunction AppRouter() {\n    return (\n        <Router>\n            <GithubCorner href='https://github.com/sabermyking/myking-page' />\n            <NavigationBar />\n\n            <Switch>\n                <Route exact path=\"/\"><IndexPage /></Route>\n                <Route path=\"/articles\"><ArticlePage /></Route>\n                <Route path=\"/home\"><HomePage /></Route>\n                <Route path=\"/about\"><AboutPage /></Route>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default AppRouter;\n","import './App.css';\nimport AppRouter from './components/AppRouter';\n\nfunction App() {\n  return (\n      AppRouter()\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}